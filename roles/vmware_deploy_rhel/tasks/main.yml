---

# - name: Get Local Content Library
#   vmware.vmware_rest.content_locallibrary_info:
#   register: content_library_info

# - name: Get Template Library ID for "RHEL Templates"
#   set_fact:
#     template_library: "{{ item.id }}"
#   loop: "{{ content_library_info.value }}"
#   when: item.name == "RHEL Templates"

# - name: Get template items for {{ vm_template }}
#   vmware.vmware_rest.content_library_item_info:
#     library_id: "{{ template_library }}"
#   register: template_lib_items_info

# - name: Get template for {{ vm_template }}
#   set_fact:
#     template_item: "{{ template_lib_items_info.value | selectattr('name', 'equalto', vm_template) | first }}"

# - name: Get cluster info for {{ vm_cluster }}
#   vmware.vmware_rest.vcenter_cluster_info:
#     filter_names:
#     - "{{ vm_cluster }}"
#   register: cluster_info

# - name: Get Resource info for {{ vm_cluster }}
#   vmware.vmware_rest.vcenter_cluster_info:
#     cluster: "{{ cluster_info.value[0].cluster }}"
#   register: resource_pool_info

# - name: Get datastore info for {{ vm_datastore }}
#   vmware.vmware_rest.vcenter_datastore_info:
#     filter_names:
#     - "{{ vm_datastore }}"
#   register: datastore_info

# - name: Get folder info for {{ vm_folder }}
#   vmware.vmware_rest.vcenter_folder_info:
#     filter_names:
#     - '{{ vm_folder }}'
#   register: folder_info

# - name: Deploy a new VM {{ vm_name }} based on template 
#   vmware.vmware_rest.vcenter_vmtemplate_libraryitems:
#     name: "{{ vm_name }}"
#     #library: "{{ template_lib }}"
#     template_library_item: '{{ template_item.id }}'
#     placement:
#       cluster: "{{ cluster_info.value[0].cluster }}"
#       datastore: "{{ datastore_info.value[0].datastore }}"
#       folder: "{{ folder_info.value[0].folder }}"
#     # hardware_customization:
#     #   cpu_update:
#     #     hot_add_enabled: true
#     #     count: "{{ vm_cpu }}"
#     #   memory_update:
#     #     hot_add_enabled: true
#     #     size_MiB: "{{ vm_ram }}"
#       #nics:
#     state: deploy
#     #powered_on: yes
#   register: vm_info

# - name: Add Management Network VM Portgroup
#   community.vmware.vmware_portgroup:
#     cluster: "{{ vm_cluster }}"
#     switch: "vcsnsx-vcs-shared-private"
#     portgroup: "segment-sandbox-b8jvq-2"
#     vlan_id: 10

- name: Create a VM from a template
  community.vmware.vmware_guest:
    name: "{{ vm_name }}"
    template: "{{ vm_template }}"
    datacenter: "{{ vm_datacenter }}"
    cluster: "{{ vm_cluster }}"
    datastore: "{{ vm_datastore }}"
    folder: "{{ vm_folder }}"
    hardware:
      memory_mb: "{{ vm_ram }}"
      num_cpus: "{{ vm_cpu }}"
    networks:
    - vlan: segment-sandbox-b8jvq   
      dvswitch_name: vcsnsx-vcs-shared-private
      mac: aa:bb:dd:aa:00:14
      ip: 10.10.10.100
      netmask: 255.255.255.0
      device_type: vmxnet3
      connected: true
      start_connected: true
    customization:
      hostname: "myhostname"
      domain: "myredhat.com"
    state: powered-off

- name: Start a VM
  community.vmware.vmware_guest_powerstate:
    name: "{{ vm_name }}"
    state: powered-on

# - name: Add NIC on network with vlan id 2001
#   community.vmware.vmware_guest_network:
#     name: segment-sandbox-b8jvq
#     datacenter: "{{ vm_datacenter }}"
#     vlan_id: "{{ item.vlan_id | default(omit) }}"
#     network_name: "{{ item.network_name | default(omit) }}"
#     connected: "{{ item.connected | default(omit) }}"
#     state: present
#   loop:
#     - vlan_id: 2000
#       connected: false
#     - network_name: guest-net
#       connected: true

# - name: Sleep for 20 seconds and continue with play
#   wait_for:
#     timeout: 20
# 
# - name: Get VM instance details
#   vmware.vmware_rest.vcenter_vm_info:
#     filter_names:
#     - "{{ vm_name }}"
#   register: vm_info_new
# 
# - name: Customize the VM
#   vmware.vmware_rest.vcenter_vm_guest_customization:
#     vm: "{{ vm_info_new.value[0].vm }}"
#     #vm: "{{ lookup('vmware.vmware_rest.vm_moid', 'DC1/vm/rhel-1') }}"
#     configuration_spec:
#       linux_config:
#         domain: "local"
#         hostname:
#           fixed_name: "{{ vm_name }}"
#           type: FIXED
#     interfaces:
#     - adapter:
#         ipv4:
#           type: STATIC
#           gateways:
#           - 192.168.1.1
#           ip_address: "{{ vm_ip }}"
#           prefix: 24
#     global_DNS_settings:
#       dns_suffix_list: []
#       dns_servers:
#       - 192.168.1.31
#   become: true
# 
# - name: Start the VM
#   vmware.vmware_rest.vcenter_vm_power:
#     state: start
#     vm: "{{ vm_info_new.value[0].vm }}"

# - name: Wait until SSH port is UP
#   ansible.builtin.wait_for:
#     port: 22
#     host: "{{ vm_ip }}"
#     #search_regex: OpenSSH
#     delay: 20
#   vars:
#     ansible_connection: local
#   ignore_errors: true

# - name: Sleep for 60 seconds and continue with play
#   wait_for:
#     timeout: 60




